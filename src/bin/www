#!/usr/bin/env node

/**
 * Module dependencies.
 */

const settings = require('../settings/settings.json')
const app = require('../index')
const fs = require('fs')
const http = require(settings.developerMode || !fs.existsSync(settings.internal.ssl.privateKeyLocation) ? "http" : "https")

/**
 * SSL dependencies.
 */

 if(!settings.developerMode && fs.existsSync(settings.internal.ssl.privateKeyLocation)){
  var privateKey = fs.readFileSync(settings.internal.ssl.privateKeyLocation)
  var certificate = fs.readFileSync(settings.internal.ssl.certificateLocation)
  var ca = fs.readFileSync(settings.internal.ssl.chainLocation)
 }

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(settings.web.port || '80')
app.set('port', port)

/**
 * Create HTTP server.
 */

const serverOptions = settings.developerMode ? {} : {
  key: privateKey,
  cert: certificate,
  ca: ca
}
const server = http.createServer(serverOptions, app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) return val

  if (port >= 0) return port

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  // debug('Listening on ' + bind) idk
  console.log('Listening on ' + bind)
}
